/* generated by Buddy */
if (window._m_ == null) window._m_ = {};
if (window.require == null) {
  window.require = function require (id) {
    if (!_m_[id]) return;
    return (_m_[id].boot) ? _m_[id]() : _m_[id];
  };
}
var global = window.global = window;

(function (global) {
  var babelHelpers = global.babelHelpers = {};

  babelHelpers.classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  babelHelpers.createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  babelHelpers.defineProperty = function (obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  };

  babelHelpers.get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;
    var desc = Object.getOwnPropertyDescriptor(object, property);

    if (desc === undefined) {
      var parent = Object.getPrototypeOf(object);

      if (parent === null) {
        return undefined;
      } else {
        return get(parent, property, receiver);
      }
    } else if ("value" in desc) {
      return desc.value;
    } else {
      var getter = desc.get;

      if (getter === undefined) {
        return undefined;
      }

      return getter.call(receiver);
    }
  };

  babelHelpers.inherits = function (subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  };

  babelHelpers.possibleConstructorReturn = function (self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  };

  babelHelpers.taggedTemplateLiteral = function (strings, raw) {
    return Object.freeze(Object.defineProperties(strings, {
      raw: {
        value: Object.freeze(raw)
      }
    }));
  };
})(typeof global === "undefined" ? self : global);
_m_['@nrk/yr-number-utils/index.js#2.0.0']=(function(module,exports){
  module=this;exports=module.exports;

  'use strict';
  
  /**
   * A collection of Number utility functions
   * https://github.com/yr/number-utils
   * @copyright Yr
   * @license MIT
   */
  
  exports.TWO_PI = Math.PI * 2;
  exports.HALF_PI = Math.PI * 0.5;
  
  /**
   * Converts a given value in degrees to radians
   * @param {Number} deg
   * @returns {Number}
   */
  exports.degreesToRadians = function (deg) {
    return deg * Math.PI / 180;
  };
  
  /**
   * Converts a given value in radians to degrees
   * @param {Number} rad
   * @returns {Number}
   */
  exports.radiansToDegrees = function (rad) {
    return 180 * rad / Math.PI;
  };
  
  /**
   * Takes a 'value' within a given range and converts it to a number between 0 and 1.
   * @param {Number} value
   * @param {Number} min
   * @param {Number} max
   * @returns {Number}
   */
  var normalize = exports.normalize = function (value, min, max) {
    if (min === max) return 1;
    return (value - min) / (max - min);
  };
  
  /**
   * Takes a normalized value and a range and returns the actual value in that range.
   * @param {Number} normValue
   * @param {Number} min
   * @param {Number} max
   * @returns {Number}
   */
  var interpolate = exports.interpolate = function (normValue, min, max) {
    return min + (max - min) * normValue;
  };
  
  /**
   * Takes a value in a given range (min1, max1) and finds the corresonding value in the next range (min2, max2).
   * @param {Number} value
   * @param {Number} min1
   * @param {Number} max1
   * @param {Number} min2
   * @param {Number} max2
   * @returns {Number}
   */
  var map = exports.map = function (value, min1, max1, min2, max2) {
    return interpolate(normalize(value, min1, max1), min2, max2);
  };
  
  /**
   * Takes a value and limits it to fall within a given range.
   * @param {Number} value
   * @param {Number} min
   * @param {Number} max
   * @returns {Number}
   */
  exports.limit = function (value, min, max) {
    return Math.min(Math.max(min, value), max);
  };
  
  /**
   * Generates a random number between a given range.
   * @param {Number} min
   * @param {Number} max
   * @returns {Number}
   */
  exports.rangedRandom = function (min, max) {
    return map(Math.random(), 0, 1, min, max);
  };
  
  /**
   * Rounds a value to the number of specified decimal places
   * @param {Number} value
   * @param {Number} decimalPlaces
   * @returns {Number}
   */
  exports.round = function (value, decimalPlaces) {
    // Skip if integer
    if (value % 1 == 0) return value;
  
    var isNegative = value < 0;
  
    value = Math.abs(value);
  
    if (!decimalPlaces) return Math.round(value) * (isNegative ? -1 : 1);
  
    var parts = value.toString().split('.');
    var pre = parts[0] + parts[1].substr(0, decimalPlaces);
    var post = parts[1].slice(decimalPlaces);
    var postRound = Math.round(post / Math.pow(10, post.length));
    var places = Math.pow(10, decimalPlaces || 0);
  
    if (parts[1].length > decimalPlaces) value = (+pre + postRound) / places;
  
    return value * (isNegative ? -1 : 1);
  };

  return module.exports;
}).call({exports:{}});
_m_['src/index.js']=(function(module,exports){
  module=this;exports=module.exports;

  'use strict';
  
  /**
   * Simple geographic distance calculator
   * https://github.com/yr/geodist
   * @copyright Yr
   * @license MIT
   */
  
  var numberUtils = _m_['@nrk/yr-number-utils/index.js#2.0.0'];
  
  var RADIUS_UNITS = {
    feet: 20908800,
    yards: 6969600,
    miles: 3960,
    mi: 3960,
    kilometers: 6371,
    km: 6371,
    meters: 6371000,
    m: 6371000
  };
  var DEFAULT_UNIT = 'meters';
  
  /**
   * Retrieve geographic distance between 'start' and 'end' lat/lon points
   * Options:
   *  - {Boolean} exact: return floating point value (default false)
   *  - {Boolean} format: return value + unit as string (default false)
   *  - {Number} limit: return boolean value if calculated distance is greater
   *  - {String} unit: return value in specified unit (default meters)
   *
   * @param {Object} start
   * @param {Object) end
   * @param {Object) options
   * @returns {Number}
   */
  module.exports = function getDistance(start, end, options) {
    options = options || {};
  
    var earthRadius = getEarthRadius(options.unit);
    var latDelta = numberUtils.degreesToRadians(end.lat - start.lat);
    var latDeltaSin = Math.sin(latDelta * 0.5);
    var lonDelta = numberUtils.degreesToRadians(end.lon - start.lon);
    var lonDeltaSin = Math.sin(lonDelta * 0.5);
    var startLatRad = numberUtils.degreesToRadians(start.lat);
    var endLatRad = numberUtils.degreesToRadians(end.lat);
    var a = latDeltaSin * latDeltaSin + lonDeltaSin * lonDeltaSin * Math.cos(startLatRad) * Math.cos(endLatRad);
    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    var dist = earthRadius * c;
  
    if (!options.exact) dist = Math.floor(dist);
    if (options.limit) return options.limit > dist ? true : false;
    if (options.format) dist = dist + ' ' + (options.unit || DEFAULT_UNIT);
  
    return dist;
  };
  
  /**
   * Retrieve radius of earth in specified 'unit'
   * @param {String} unit
   * @returns {Number}
   */
  function getEarthRadius(unit) {
    unit = unit || DEFAULT_UNIT;
    unit = unit.toLowerCase();
    if (!RADIUS_UNITS[unit]) unit = DEFAULT_UNIT;
  
    return RADIUS_UNITS[unit];
  }

  return module.exports;
}).call({exports:{}});